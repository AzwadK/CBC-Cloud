# -*- coding: utf-8 -*-
"""CBC xtract.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15dwmV5vcJF7w_uMWwRPNFtuXiIITdeKW

Imports:
"""

import re
# !sudo apt install tesseract-ocr
# !pip install mysql.connector
import mysql.connector
from PIL import Image
# !pip install pytesseract
import pytesseract
import shutil
import os
import random

"""OCR:

Tesseract:
"""

from google.colab import files
uploaded = files.upload()
for filename in uploaded.keys():
    im = Image.open(filename)
    extractedInformation = pytesseract.image_to_string(im)
    print(extractedInformation)

"""Scandocflow:"""

from google.colab import files
import json
import requests
import base64


# Upload the image file
uploaded = files.upload()

# Get the file name
image_file = list(uploaded.keys())[0]

# Open the image file and read its content
with open(image_file, "rb") as image_file:
    encoded_string = base64.b64encode(image_file.read()).decode()

# Get the source URL for the image
image_url = "data:image/jpeg;base64," + encoded_string

# URL for the ScandoCflow OCR API
api_url = "https://backend.scandocflow.com/v1/api/documents/extract?access_token=axP1spbslwFpLmHmDW2C0xrMGWBHXUEfXjqA7t7Os4EdUzwjuJzsIsjOqq4QNVnr"

payload = json.dumps({
  "type": "ocr",
  "lang": "eng",
  "files": [
    {
      "title": "test.png",
      "src": image_url
    }
  ]
})


# Set the headers for the API request
headers = {
    'Content-Type': 'application/json'
}

# Send the image to the API
response = requests.request("POST", api_url, headers=headers, data=payload)

parsed_json = json.loads(response.text)

# Print the OCR text
st1 = parsed_json["documents"]
encstr = st1[0]["plainTextBase64"]
decoded_string = base64.b64decode(encstr)

print (decoded_string)

"""Text Processing(Scandoc):"""

text = decoded_string
text = text.decode('utf-8')

def extract_test_results(report):
    results = {}
    lines = report.split("\n")
    for line in lines:
        parts = line.split()
        if len(parts) >= 3 and parts[2].isnumeric():
            test_name = " ".join(parts[:2])
            result = parts[2]
            unit = parts[3]
            results[test_name] = {"result": result, "unit": unit}
    return results

print(extract_test_results(text))

"""Text Processing(Tesseract):


"""

text = extractedInformation

def extract_test_results(text):
    # Extract the test results from the text
    result_list = re.findall(r'(?i)([A-Z]{1}[a-z]+)\s([\d.]+)\s([a-zA-Z/]+)', text)
    # Create a dictionary to store the test results
    test_results = {}
    for result in result_list:
        test_name, test_result, test_unit = result
        # Add the test results to the dictionary
        test_results[test_name] = {'result': test_result, 'unit': test_unit}
    return test_results



extracted = extract_test_results(text)
print(extracted)